package main

import "fmt"

func main() {
	iterationMap()
}

// Функция, иллюстрирующая синтаксис работы с map
func syntaxMap() {

	/*
		Создаем map, указываем в квадратных скобках тип данных ключа, за ними тип данных значение
		и в круглых скобках определяем содержимое.
	*/
	mymap := map[string]int{
		"key": 123,
	}
	fmt.Println("mymap == ", mymap)

	// Получаем значение мапы по ключу
	fmt.Printf("Значение mymap по ключу 'key' == %v\n", mymap["key"])

	// Переопределение значение мапы по ключу
	mymap["key"] = 321
	fmt.Printf("Значение mymap по ключу 'key' == %v\n", mymap["key"])

	// Добавление нового элемента в мап
	mymap["newElem"] = 777
	fmt.Println("mymap == ", mymap)

	/*
		Удаление элемента из мапы. Для этого нужно использовать встроенный метод delete()
		Ниже, для иллюстрации, я добавлю элемент в мап и удалю его потом
		Функция delete() принимает объект мапы, на котором надо произвести удаление и ключ для удаления элемента.
		Если попробовать удалить эл-т по несуществующему ключу, то ничего не будет.
		Если попробовать использовать (например вывести в терминал) элемент мапы по несуществубщему ключу,
		то будет просто дефолтное значение указанного типа данных, например для string - пустая строка, int - это ноль, ...
	*/
	fmt.Println("Добавляем в mymap пятый элемент.")
	mymap["fiveElement"] = 5
	fmt.Println("mymap == ", mymap)
	delete(mymap, "fiveElement")
	fmt.Println("mymap == ", mymap)

	delete(mymap, "elem404") // Пробуем удалить эл-т по несуществующему ключу
	// Принтуем несуществующий эл-т и получаем 0, т.к. это дефолтное значение для int
	fmt.Printf("Значение mymap по ключу 'elem404' == %v\n", mymap["elem404"])
}

// Функция для иллюстрации итерации по map
func iterationMap() {
	mymap := map[string]int{"a": 1, "b": 2}
	for key, val := range mymap {
		fmt.Println(key, val)
	}
}
